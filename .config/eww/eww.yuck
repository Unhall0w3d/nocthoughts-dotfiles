;; Created   by https://github.com/unhall0w3d
;; Designed  by https://github.com/unhall0w3d
;; Maintaned by https://github.com/unhall0w3d
;;;;;;;;;;;
;; Vars
;;;;;;;;;;;
(defvar vol_reveal false)
(defvar mic_reveal false)
(defvar music_reveal false)
(defvar control_reveal false)
(defvar time_rev false)
(defvar ethernet_reveal false)
;;;;;;;;;;;
;; Listens
;;;;;;;;;;;
(deflisten appname "scripts/appname")
(deflisten workspace "scripts/workspace")
(deflisten wallpaper "/home/ken/.scripts/wallpaper ~/Pictures/THE\ GIGALOAD")
;;;;;;;;;;;
;; Polls
;;;;;;;;;;;
(defpoll clock_time :interval "5s" "date '+\%l:\%M \%p'")
(defpoll clock_date :interval "10h" "date '+%b %d, %Y'")
(defpoll calendar_day :interval "20h" "date '+%d'")
(defpoll calendar_year :interval "20h" "date '+%Y'")
(defpoll monitors :interval "1m" "hyprctl monitors -j | jq -rc '[ .[].id ] | sort_by( . )'")
(defpoll volume_percent :interval "3s"  "pamixer --get-volume --sink alsa_output.pci-0000_0c_00.4.analog-surround-21")
(defpoll mic_percent :interval "3s" "pamixer --get-volume --source alsa_input.usb-Astro_Gaming_Astro_MixAmp_Pro-00.mono-fallback")
(defpoll diskpoll :interval "30m" "./scripts/disk")
(defpoll cpustat :interval "1s" "./scripts/cpu")
(defpoll ethernet_name :interval "24h" "./scripts/ethernet -n")
(defpoll ethernet_icon :interval "30s" "./scripts/ethernet -i")
(defpoll ethernet_up :interval "3s" "./scripts/ethernet -u")
(defpoll ethernet_down :interval "3s" "./scripts/ethernet -d")
(defpoll ethernet_status :interval "5s" "./scripts/ethernet -s")
(defpoll ethernet_ip :interval "5m" "./scripts/ethernet -p")
;;;;;;;;;;;
;; Widgets
;;;;;;;;;;;
;; workspaces
(defwidget workspaces []
  (literal 
    :content workspace))
;; launcher buttons
(defwidget launcher []
  (box 
    :class "launcher_module"
    :orientation "h"
    (button
        :onclick "./scripts/rofi -toggle1"
        :class "iconlauncher" "󰣇")
  (box 
    :class "launcher_module"
    :orientation "h"
    (button
        :onclick "./scripts/rofi -toggle2"
        :class "iconsearch" ""))
  (box
    :class "launcher_module"
    :orientation "h"
    (button
        :onclick "gtklock &"
        :class "iconpower" ""))))
;; current focus
(defwidget focus []
  (eventbox
    :onhover "${EWW_CMD} update control_reveal=true"
	  :onhoverlost "${EWW_CMD} update control_reveal=false"
    (box
        :valign "center"
	    :orientation "h"
	    :space-evenly "false"
	    :vexpand "false"
	    :hexpand "false" 
        (literal 
            :content appname)
	    (revealer
	      :transition "slideright"
		    :reveal control_reveal
		    :duration "350ms"
        (box
            :vexpand "false"
            :hexpand "false"
            :orientation "h"
            :space-evenly "false"
            (button
                :class "focus-button"
                :onclick "hyprctl dispatch togglefloating 1" "") 
		  	    (button
		  	        :class "focus-button"
		  	        :onclick "hyprctl dispatch fullscreen 1" "")
		  	    (button
		  	        :class "focus-button"
                :onclick "hyprctl dispatch killactive 1" ""))))))
;; volume widget
(defwidget volume []
  (eventbox 
    :onhover "${EWW_CMD} update vol_reveal=true"
	:onhoverlost "${EWW_CMD} update vol_reveal=false"
    (box
        :class "module-2"
        :space-evenly "false"
        :orientation "h"
        :spacing "3" 
	        (revealer 
	            :transition "slideright"
			    :reveal vol_reveal
			    :duration "350ms"
	            (scale  
	                :class "volbar"
			        :value volume_percent
			        :orientation "h"
			        :tooltip "${volume_percent}%"
			        :max 100
			        :min 0
			        :onchange "pamixer --sink alsa_output.pci-0000_0c_00.4.analog-surround-21 --set-volume {}" ))
	        (button
	            :onclick "${EWW_CMD} open --toggle audio_ctl"
	            :class "volume_icon"
	            "墳"))))
;; microphone widget
(defwidget microphone []
  (eventbox 
    :onhover "${EWW_CMD} update mic_reveal=true"
	:onhoverlost "${EWW_CMD} update mic_reveal=false"
    (box
        :class "module-2"
        :space-evenly "false"
        :orientation "h"
        :spacing "3" 
	        (revealer 
	            :transition "slideright"
			    :reveal mic_reveal
			    :duration "350ms"
	            (scale  
	                :class "micbar"
			        :value mic_percent
			        :orientation "h"
			        :tooltip "${mic_percent}%"
			        :max 100
			        :min 0
			        :onchange "pamixer --source alsa_input.usb-Astro_Gaming_Astro_MixAmp_Pro-00.mono-fallback --set-volume {}" ))
	        (button
	            :onclick "${EWW_CMD} open --toggle audio_ctl"
	            :class "microphone_icon"
	            ""))))
;; ethernet widget
(defwidget ethernet1 []
    (box :vexpand "false" :hexpand "false"
            :space-evenly false
            :orientation "h"
            :tooltip "${ethernet_name}
${ethernet_status}
${ethernet_ip}"
        (button
            :limit-width 2
            :class "ethernet_icon"
            :show_truncated false
            :wrap false
            :onclick "${EWW_CMD} open --toggle system_ethernet1"
            "󰛳")))

(defwidget ethernet2 []
    (box :vexpand "false" :hexpand "false"
            :space-evenly false
            :orientation "h"
            :tooltip "${ethernet_name}
${ethernet_status}
${ethernet_ip}"
        (button
            :limit-width 2
            :class "ethernet_icon"
            :show_truncated false
            :wrap false
            :onclick "${EWW_CMD} open --toggle system_ethernet2"
            "󰛳")))

(defwidget ethernet3 []
    (box :vexpand "false" :hexpand "false"
            :space-evenly false
            :orientation "h"
            :tooltip "${ethernet_name}
${ethernet_status}
${ethernet_ip}"
        (button
            :limit-width 2
            :class "ethernet_icon"
            :show_truncated false
            :wrap false
            :onclick "${EWW_CMD} open --toggle system_ethernet3"
            "󰛳")))
;; change wallpaper
(defwidget wallpaper []
    (box :vexpand "false" :hexpand "false"
            :space-evenly false
            :orientation "h"
            :tooltip "Change Wallpaper"
        (button
            :limit-width 2
            :class "wallpaper_icon"
            :show_truncated false
            :wrap false
            :onclick "/home/ken/.scripts/wallpaper"
            "")))
;; storage widget
(defwidget disk []
		(box :class "disk_module" :vexpand "false" :hexpand "false" 
            (circular-progress 
                :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
                :class "diskbar"
                :thickness 4
            (button 
                :class "icondisk"
                :limit-width 2
                :tooltip "${round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}% Storage Used"
                :onclick "${EWW_CMD} open --toggle system_disk"
                :show_truncated false
                :wrap false
                ""))))
;; memory widget
(defwidget mem []
		(box :class "mem_module" :vexpand "false" :hexpand "false" 
            (circular-progress 
                :value {EWW_RAM.used_mem_perc}
                :class "membar"
                :thickness 4
            (button 
                :class "iconmem"
                :limit-width 2
                :tooltip "${EWW_RAM.used_mem_perc}% RAM Used"
                :onclick "${EWW_CMD} open --toggle system_ram"
                :show_truncated false
                :wrap false
                ""))))
;; cpu widget
(defwidget cpu []
		(box :class "cpu_module" :vexpand "false" :hexpand "false" 
            (circular-progress 
                :value "${cpustat}"
                :class "cpubar"
                :thickness 4
            (button 
                :class "iconcpu"
                :limit-width 2
                :tooltip "${EWW_CPU.avg}% CPU Used"
                :onclick "${EWW_CMD} open --toggle system_cpu"
                :show_truncated false
                :wrap false
                ""))))
;; Define System widget pop-ups
;; system ethernet
(defwidget system_ethernet []
    (box :class "sys_win" :vexpand "false" :hexpand "false"
        (box
            :class "sys_eth_box"
            :orientation "v"
            :space-evenly "false"
            :spacing 3
            (label
                :text "${ethernet_icon}  - enp5s0"
                :show_truncated false
                :wrap false
                :angle 0 0)
            (label
                :text "${ethernet_status}"
                :show_truncated false
                :wrap false
                :angle 0 0)
            (label
                :text "${ethernet_ip}/24"
                :show_truncated false
                :wrap false
                :angle 0 0)
            (label
                :text "${ethernet_up}"
                :show_truncated false
                :wrap false
                :angle 0 0)
            (label
                :text "${ethernet_down}"
                :show_truncated false
                :wrap false
                :angle 0 0))))
;; system memory
(defwidget system_mem []
  (box 
    :class "sys_win"
    :orientation "h"
    :space-evenly "false"
    :hexpand "false"
    :vexpand "false"
    :spacing 0
    (box 
        :class "sys_mem_box"
        :orientation "h"
        :space-evenly "false"
        :halign "start"
        (circular-progress
            :value {EWW_RAM.used_mem_perc}
            :class "sys_mem"
            :thickness 9
            (label
                :text "󰳆"
                :class "sys_icon_mem"
                :limit-width 2
                :show_truncated false
                :wrap false
                :angle 0.0))
        (box
            :orientation "h"
            :space-evenly "false"
            :spacing 0
            :hexpand "false"
            :vexpand "false"
            (label
                :text "RAM"
                :halign "start"
                :class "sys_text_mem"
                :limit-width 9
                :show_truncated false
                :wrap false)
            (label
                :text "${round(((EWW_RAM.available_mem / 1024) / 1024), 0)} MB Free | ${round(((EWW_RAM.total_mem / 1024) / 1024), 0)} MB Total"
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 35
                :show_truncated false
                :wrap false)
            (label 
                :text "${round(((EWW_RAM.used_mem / 1024) / 1024), 0)}MB Used"
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                :wrap false)
            ))))
;; system cpu
(defwidget system_cpu []
  (box 
    :class "sys_win"
    :orientation "h"
    :space-evenly "false"
    :hexpand "false"
    :vexpand "false"
    :spacing 0
    (box 
        :class "sys_cpu_box"
        :orientation "h"
        :space-evenly "false"
        :halign "start"
        (circular-progress
            :value cpustat
            :class "sys_cpu"
            :thickness 9
            (label
                :text "󰧑"
                :class "sys_icon_cpu"
                :limit-width 2
                :show_truncated false
                :wrap false
                :angle 0.0))
        (box
            :orientation "h"
            :space-evenly "false"
            :spacing 0
            :hexpand "false"
            :vexpand "false"
            (label
                :text "CPU"
                :halign "start"
                :class "sys_text_cpu"
                :limit-width 9
                :show_truncated false
                :wrap false)
            (label
                :text "${cpustat}% Used"
                :halign "start"
                :class "sys_text_cpu_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)
            ))))
;; system disk
(defwidget system_disk []
  (box 
    :class "sys_win"
    :orientation "h"
    :space-evenly "false"
    :hexpand "false"
    :vexpand "false"
    :spacing 0
    (box 
        :class "sys_disk_box"
        :orientation "h"
        :space-evenly "false"
        :halign "start"
        (circular-progress
            :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
            :class "sys_disk"
            :thickness 9
            (label
                :text "󰪩"
                :class "sys_icon_disk"
                :limit-width 2
                :show_truncated false
                :wrap false
                :angle 0.0))
        (box
            :orientation "h"
            :space-evenly "false"
            :spacing 0
            :hexpand "false"
            :vexpand "false"
            (label
                :text "DISK"
                :halign "start"
                :class "sys_text_disk"
                :limit-width 9
                :show_truncated false
                :wrap false)
            (label
                :text "${round(((((EWW_DISK["/"].free) / 1024) / 1024) / 1024), 0)} GB Free | ${round(((((EWW_DISK["/"].total) / 1024) / 1024) / 1024), 0)} GB Total"
                :halign "start"
                :class "sys_text_disk_sub"
                :limit-width 35
                :show_truncated false
                :wrap false)
            (label
                :text "${round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}% Used"
                :halign "start"
                :class "sys_text_disk_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)
            ))))
;; audio widget
(defwidget audio []
	(box 
	    :class "audio-box"
	    :orientation "h"
	    :space-evenly "false"
	    :vexpand "false"
	    :hexpand "false"
        :spacing 10
	    (box 
	        :halign "h"
	        :space-evenly "false"
	        :hexpand "false"
	        :vexpand "false"
	        (box 
	            :class "speaker_icon"
	            :orientation "h")
	        (box 
	            :orientation "v"
	            :halign "center"
	            :vexpand "false"
	            :hexpand "false"
                (label
                    :class "speaker_text"
                    :text "speaker"
                    :valign "center"
                    :halign "left" )
	            (box
	                :class "speaker_bar"
	                :halign "center"
	                :vexpand "false"
	                :hexpand "false"
	                (scale
	                    :value volume_percent
                        :space-evenly "false"
			            :orientation "h"
			            :onchange "pamixer --sink alsa_output.pci-0000_0c_00.4.analog-surround-21 --set-volume {}" 
                        :tooltip "volume on ${volume_percent}%"
			            :max 100
			            :min 0))))
	    (box 
	        :halign "h"
	        :space-evenly "false"
	        :hexpand "false"
	        :vexpand "false"
	        (box 
	            :class "mic_icon"
	            :orientation "v")
	            (box 
	                :orientation "v"
	                :halign "center"
	                :vexpand "false"
	                :hexpand "false"
                    (label
                        :class "mic_text"
                        :text "mic"
                        :valign "center"
                        :halign "left" )
	                (box 
	                    :class "mic_bar"
	                    :halign "center"
	                    :vexpand "false"
	                    :hexpand "false"
	                    (scale
	                        :value mic_percent
                            :space-evenly "false"
			                :orientation "h"
                            :tooltip "mic on ${mic_percent}%"
			                :onchange "pamixer --source alsa_input.usb-Astro_Gaming_Astro_MixAmp_Pro-00.iec958-stereo --set-volume {}" 
			                :max 100
			                :min 0))))
        (box
            :halign "h"
            :class "emptybox"
            :space-evenly "false"
            :hexpand "false"
            :vexpand "false")))
;; clock widget
(defwidget clock_module []
  (eventbox
    :onhover "${EWW_CMD} update time_rev=true"
  	:onhoverlost "${EWW_CMD} update time_rev=false"
      (box
          :class "module"
          :space-evenly "false"
          :orientation "h"
          :spacing "0" 
          (label
              :text clock_time
              :class "clock_time_class" )
          (revealer :transition "slideleft"
  		    :reveal time_rev
  		    :duration "350ms"
              (button 
                  :class "clock_date_class"
                  :onclick "${EWW_CMD} open --toggle calendar" clock_date)))))
;; Calendar Widget
(defwidget cal []
	(box 
	    :class "cal"
	    :orientation "h"
	    (box
	        :class "cal-in"
	        (calendar
			  :day calendar_day 
			  :year calendar_year))))
;; define widget groups
;; separator
(defwidget sep []
  (box 
    :vexpand "false"
    :hexpand "false"
    (label
        :class "separ"
        :text "")))
;; left
(defwidget left []
	(box 
	    :orientation "h" 
		:space-evenly false
        :class "modules"  
        :halign "start"
    (launcher)
    (sep)
    (workspaces)))
;; center
(defwidget center []
	(box :orientation "h" 
		 :space-evenly false
         :class "modules"  
         :halign "center"
    (focus)))
;; right
(defwidget right1 []
	(box
	    :orientation "h" 
		:space-evenly false
        :spacing 0
        :class "modules"  
        :halign "end"
    (microphone)
    (volume)
    (sep)
    (ethernet1)
    (wallpaper)
    (sep)
    (cpu)
    (mem)
    (disk)
    (sep)
    (clock_module)))
(defwidget right2 []
	(box
	    :orientation "h" 
		:space-evenly false
        :spacing 0
        :class "modules"  
        :halign "end"
    (microphone)
    (volume)
    (sep)
    (ethernet2)
    (wallpaper)
    (sep)
    (cpu)
    (mem)
    (disk)
    (sep)
    (clock_module)))
(defwidget right3 []
	(box
	    :orientation "h" 
		:space-evenly false
        :spacing 0
        :class "modules"  
        :halign "end"
    (microphone)
    (volume)
    (sep)
    (ethernet3)
    (wallpaper)
    (sep)
    (cpu)
    (mem)
    (disk)
    (sep)
    (clock_module)))
;; Define bar layout
(defwidget bar_layout1 []
  (centerbox 
    :class "bar"
    :orientation "h"
    (left)
    (center)
    (right1)
    ))
(defwidget bar_layout2 []
  (centerbox 
    :class "bar"
    :orientation "h"
    (left)
    (center)
    (right2)
    ))
(defwidget bar_layout3 []
  (centerbox 
    :class "bar"
    :orientation "h"
    (left)
    (center)
    (right3)
    ))
;;;;;;;;;;;
;; Windows
;;;;;;;;;;;
;; system_ram window
(defwindow system_ram
    :stacking "fg"
    :focusable "false"
    :screen 1
    :monitor 0
	:geometry (geometry
            :x "20" 
			:y "7%" 
            :anchor "top right"
			:width "290px" 
			:height "120px")
    (system_mem))
;; system_cpu window
(defwindow system_cpu
    :stacking "fg"
    :focusable "false"
    :screen 1
    :monitor 0
	:geometry (geometry
            :x "20" 
			:y "20%" 
            :anchor "top right"
			:width "290px" 
			:height "120px")
    (system_cpu))
;; system_ethernet window
(defwindow system_ethernet1
    :stacking "fg"
    :focusable "false"
    :screen 1
    :monitor 0
    :geometry (geometry
            :x "9%"
            :y "5%"
            :anchor "bottom right"
            :width "290px"
            :height "120px")
    (system_ethernet))
(defwindow system_ethernet2
    :stacking "fg"
    :focusable "false"
    :screen 1
    :monitor 1
    :geometry (geometry
            :x "9%"
            :y "5%"
            :anchor "bottom right"
            :width "290px"
            :height "120px")
    (system_ethernet))
(defwindow system_ethernet3
    :stacking "fg"
    :focusable "false"
    :screen 1
    :monitor 2
    :geometry (geometry
            :x "9%"
            :y "5%"
            :anchor "bottom right"
            :width "290px"
            :height "120px")
    (system_ethernet))
;; system_disk window
(defwindow system_disk
    :stacking "fg"
    :focusable "false"
    :screen 1
    :monitor 0
	:geometry (geometry
            :x "20" 
			:y "33%" 
            :anchor "top right"
			:width "290px" 
			:height "120px")
    (system_disk))
;; Calendar Window
(defwindow calendar
    :stacking "fg"
    :focusable "false"
    :screen 1
    :monitor 0
	:geometry (geometry
        :x "20"
	    :y "1%"
        :anchor "bottom right"
	    :width "270px" 
	    :height "60px")
(cal))
;; audio control window
(defwindow audio_ctl
    :stacking "fg"
    :focusable "false"
    :screen 1
    :monitor 0
	:geometry (geometry 
        :x "20" 
		:y "7%" 
        :anchor "top right"
		:width "280px" 
		:height "60px")
    (audio))
;; bar
(defwindow bar0
    :geometry (geometry :x "5" 
						:y "5" 
						:height "40px" 
						:width "99%"
                        :anchor "bottom center")
    :monitor 0
    :reserve (struts :distance "10px"
                     :side "bottom center")
    :exclusive "true"
    :stacking "fg"
    :windowtype "dock"
(bar_layout1))
;; bar
(defwindow bar1
    :geometry (geometry :x "5" 
						:y "5" 
						:height "40px" 
						:width "99%"
                        :anchor "bottom center")
    :monitor 1
    :reserve (struts :distance "10px"
                     :side "bottom center")
    :exclusive "true"
    :stacking "fg"
    :windowtype "dock"
(bar_layout2))
;; bar
(defwindow bar2
    :geometry (geometry :x "5" 
						:y "5" 
						:height "40px" 
						:width "99%"
                        :anchor "bottom center")
    :monitor 2
    :reserve (struts :distance "10px"
                     :side "bottom center")
    :exclusive "true"
    :stacking "fg"
    :windowtype "dock"
(bar_layout3))
