;; Variables

(include "sidebar.yuck")
(include "notifications.yuck")

(defpoll monitors :interval "1m" "hyprctl monitors -j | jq -rc '[ .[].id ] | sort_by( . )'")
(defpoll clock_time :interval "5s" "date '+\%l:\%M \%p'")
(defpoll clock_date :interval "10h" "date '+%b %d, %Y'")
(defpoll calendar_day :interval "20h" "date '+%d'")
(defpoll calendar_year :interval "20h" "date '+%Y'")
(defpoll volume_percent :interval "1s"  "pamixer --get-volume --sink alsa_output.pci-0000_0d_00.4.analog-surround-21")
(defpoll mic_percent :interval "3s" "pamixer --get-volume --source alsa_input.usb-Astro_Gaming_Astro_MixAmp_Pro-00.mono-fallback")
(defpoll diskpoll :interval "30m" "./scripts/disk")

(deflisten workspace "$HOME/.config/eww/scripts/workspace")
(deflisten appname "scripts/appname")

(defvar vol_reveal false)
(defvar mic_reveal false)
(defvar music_reveal false)
(defvar control_reveal false)
(defvar time_rev false)


;; widgets

;; launcher buttons
(defwidget launcher []
  (box 
    :class "launcher_module"
    :orientation "h"
    (button
        :onclick "./scripts/rofi -toggle1"
        :class "iconlauncher" "󰣇")
    (button
        :onclick "./scripts/rofi -toggle2"
        :class "iconsearch" "")
   ))

(defwidget workspaces []
  (literal 
    :content workspace))

;; appnames widget
(defwidget appnames []
  (eventbox
    :onhover "${EWW_CMD} update control_reveal=true"
	  :onhoverlost "${EWW_CMD} update control_reveal=false"
    (box
	    :orientation "h"
	    :space-evenly "false"
	    :vexpand "false"
	    :hexpand "false" 
        (literal 
            :content appname)
	    (revealer
	      :transition "slideright"
		    :reveal control_reveal
		    :duration "350ms"
        (box
            :vexpand "false"
            :hexpand "false"
            :orientation "h"
            :space-evenly "false"
            (button
                :class "app-button"
                :onclick "hyprctl dispatch togglefloating 1" "") 
		  	    (button
		  	        :class "app-button"
		  	        :onclick "hyprctl dispatch fullscreen 1" "")
		  	    (button
		  	        :class "app-button"
                :onclick "hyprctl dispatch killactive 1" ""))))))

;; volume widget
(defwidget volume []
  (eventbox 
    :onhover "${EWW_CMD} update vol_reveal=true"
	:onhoverlost "${EWW_CMD} update vol_reveal=false"
    (box
        :class "module-2"
        :space-evenly "false"
        :orientation "h"
        :spacing "3" 
	        (revealer 
	            :transition "slideright"
			    :reveal vol_reveal
			    :duration "350ms"
	            (scale  
	                :class "volbar"
			        :value volume_percent
			        :orientation "h"
			        :tooltip "${volume_percent}%"
			        :max 100
			        :min 0
			        :onchange "pamixer --sink alsa_output.pci-0000_0d_00.4.analog-surround-21 --set-volume {}" ))
	        (button
	            :onclick "${EWW_CMD} open --toggle audio_ctl"
	            :class "volume_icon"
	            "墳"))))

;; microphone widget
(defwidget microphone []
  (eventbox 
    :onhover "${EWW_CMD} update mic_reveal=true"
	:onhoverlost "${EWW_CMD} update mic_reveal=false"
    (box
        :class "module-2"
        :space-evenly "false"
        :orientation "h"
        :spacing "3" 
	        (revealer 
	            :transition "slideright"
			    :reveal mic_reveal
			    :duration "350ms"
	            (scale  
	                :class "micbar"
			        :value mic_percent
			        :orientation "h"
			        :tooltip "${mic_percent}%"
			        :max 100
			        :min 0
			        :onchange "pamixer --source alsa_input.usb-Astro_Gaming_Astro_MixAmp_Pro-00.mono-fallback --set-volume {}" ))
	        (button
	            :onclick "${EWW_CMD} open --toggle audio_ctl"
	            :class "microphone_icon"
	            ""))))

;; storage widget
(defwidget disk []
		(box :class "disk_module" :vexpand "false" :hexpand "false" 
            (circular-progress 
                :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
                :class "diskbar"
                :thickness 4
            (button 
                :class "icondisk"
                :limit-width 2
                :tooltip "${round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}% Storage Used"
                :onclick "${EWW_CMD} open --toggle system_disk"
                :show_truncated false
                :wrap false
                ""))))

;; memory widget
(defwidget mem []
		(box :class "mem_module" :vexpand "false" :hexpand "false" 
            (circular-progress 
                :value {EWW_RAM.used_mem_perc}
                :class "membar"
                :thickness 4
            (button 
                :class "iconmem"
                :limit-width 2
                :tooltip "${EWW_RAM.used_mem_perc}% RAM Used"
                :onclick "${EWW_CMD} open --toggle system_ram"
                :show_truncated false
                :wrap false
                ""))))

;; cpu widget
(defwidget cpu []
		(box :class "cpu_module" :vexpand "false" :hexpand "false" 
            (circular-progress 
                :value {EWW_CPU.avg}
                :class "cpubar"
                :thickness 4
            (button 
                :class "iconcpu"
                :limit-width 2
                :tooltip "${EWW_CPU.avg}% CPU Used"
                :onclick "${EWW_CMD} open --toggle system_cpu"
                :show_truncated false
                :wrap false
                ""))))

;; clock widget
(defwidget clock_module []
  (eventbox
      :onhover "${EWW_CMD} update time_rev=true"
  	:onhoverlost "${EWW_CMD} update time_rev=false"
      (box
          :class "module"
          :space-evenly "false"
          :orientation "h"
          :spacing "0" 
          (label
              :text clock_time
              :class "clock_time_class" )
          (revealer :transition "slideleft"
  		    :reveal time_rev
  		    :duration "350ms"
              (button 
                  :class "clock_date_class"
                  :onclick "${EWW_CMD} open --toggle calendar" clock_date)))))


;; audio widget
(defwidget audio []
	(box 
	    :class "audio-box"
	    :orientation "h"
	    :space-evenly "false"
	    :vexpand "false"
	    :hexpand "false"
        :spacing 10
	    (box 
	        :halign "h"
	        :space-evenly "false"
	        :hexpand "false"
	        :vexpand "false"
	        (box 
	            :class "speaker_icon"
	            :orientation "h")
	        (box 
	            :orientation "v"
	            :halign "center"
	            :vexpand "false"
	            :hexpand "false"
                (label
                    :class "speaker_text"
                    :text "speaker"
                    :valign "center"
                    :halign "left" )
	            (box
	                :class "speaker_bar"
	                :halign "center"
	                :vexpand "false"
	                :hexpand "false"
	                (scale
	                    :value volume_percent
                        :space-evenly "false"
			            :orientation "h"
			            :onchange "pamixer --sink alsa_output.pci-0000_0d_00.4.analog-surround-21 --set-volume {}" 
                        :tooltip "volume on ${volume_percent}%"
			            :max 100
			            :min 0))))
	    (box 
	        :halign "h"
	        :space-evenly "false"
	        :hexpand "false"
	        :vexpand "false"
	        (box 
	            :class "mic_icon"
	            :orientation "v")
	            (box 
	                :orientation "v"
	                :halign "center"
	                :vexpand "false"
	                :hexpand "false"
                    (label
                        :class "mic_text"
                        :text "mic"
                        :valign "center"
                        :halign "left" )
	                (box 
	                    :class "mic_bar"
	                    :halign "center"
	                    :vexpand "false"
	                    :hexpand "false"
	                    (scale
	                        :value mic_percent
                            :space-evenly "false"
			                :orientation "h"
                            :tooltip "mic on ${mic_percent}%"
			                :onchange "pamixer --source alsa_input.usb-Astro_Gaming_Astro_MixAmp_Pro-00.iec958-stereo --set-volume {}" 
			                :max 100
			                :min 0))))
        (box
            :halign "h"
            :class "emptybox"
            :space-evenly "false"
            :hexpand "false"
            :vexpand "false")))

;; audio control window

(defwindow audio_ctl
    :stacking "fg"
    :focusable "false"
    :screen 1
    :monitor 0
	:geometry (geometry 
        :x "20" 
		:y "7%" 
        :anchor "top right"
		:width "280px" 
		:height "60px")
    (audio))


;;Define System widget
;; system memory
(defwidget system_mem []
  (box 
    :class "sys_win"
    :orientation "h"
    :space-evenly "false"
    :hexpand "false"
    :vexpand "false"
    :spacing 0
    (box 
        :class "sys_mem_box"
        :orientation "h"
        :space-evenly "false"
        :halign "start"
        (circular-progress
            :value {EWW_RAM.used_mem_perc}
            :class "sys_mem"
            :thickness 9
            (label
                :text "󰳆"
                :class "sys_icon_mem"
                :limit-width 2
                :show_truncated false
                :wrap false
                :angle 0.0))
        (box
            :orientation "h"
            :space-evenly "false"
            :spacing 0
            :hexpand "false"
            :vexpand "false"
            (label
                :text "RAM"
                :halign "start"
                :class "sys_text_mem"
                :limit-width 9
                :show_truncated false
                :wrap false)
            (label
                :text "${round(((EWW_RAM.available_mem / 1024) / 1024), 0)} MB Free | ${round(((EWW_RAM.total_mem / 1024) / 1024), 0)} MB Total"
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 35
                :show_truncated false
                :wrap false)
            (label 
                :text "${round(((EWW_RAM.used_mem / 1024) / 1024), 0)}MB Used"
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                :wrap false)
            ))))

;; system cpu
(defwidget system_cpu []
  (box 
    :class "sys_win"
    :orientation "h"
    :space-evenly "false"
    :hexpand "false"
    :vexpand "false"
    :spacing 0
    (box 
        :class "sys_cpu_box"
        :orientation "h"
        :space-evenly "false"
        :halign "start"
        (circular-progress
            :value {EWW_CPU.avg}
            :class "sys_cpu"
            :thickness 9
            (label
                :text "󰧑"
                :class "sys_icon_cpu"
                :limit-width 2
                :show_truncated false
                :wrap false
                :angle 0.0))
        (box
            :orientation "h"
            :space-evenly "false"
            :spacing 0
            :hexpand "false"
            :vexpand "false"
            (label
                :text "CPU"
                :halign "start"
                :class "sys_text_cpu"
                :limit-width 9
                :show_truncated false
                :wrap false)
            (label
                :text "${round(EWW_CPU.avg, 3)}Ghz"
                :halign "start"
                :class "sys_text_cpu_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)
            ))))

;; system disk
(defwidget system_disk []
  (box 
    :class "sys_win"
    :orientation "h"
    :space-evenly "false"
    :hexpand "false"
    :vexpand "false"
    :spacing 0
    (box 
        :class "sys_disk_box"
        :orientation "h"
        :space-evenly "false"
        :halign "start"
        (circular-progress
            :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
            :class "sys_disk"
            :thickness 9
            (label
                :text "󰪩"
                :class "sys_icon_disk"
                :limit-width 2
                :show_truncated false
                :wrap false
                :angle 0.0))
        (box
            :orientation "h"
            :space-evenly "false"
            :spacing 0
            :hexpand "false"
            :vexpand "false"
            (label
                :text "DISK"
                :halign "start"
                :class "sys_text_disk"
                :limit-width 9
                :show_truncated false
                :wrap false)
            (label
                :text "${round(((((EWW_DISK["/"].free) / 1024) / 1024) / 1024), 0)} GB Free | ${round(((((EWW_DISK["/"].total) / 1024) / 1024) / 1024), 0)} GB Total"
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 35
                :show_truncated false
                :wrap false)
            (label
                :text "${round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}% Used"
                :halign "start"
                :class "sys_text_disk_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)
            ))))

;; system_ram window
(defwindow system_ram
    :stacking "fg"
    :focusable "false"
    :screen 1
    :monitor 0
	:geometry (geometry
            :x "20" 
			:y "7%" 
            :anchor "top right"
			:width "290px" 
			:height "120px")
    (system_mem))

;; system_cpu window
(defwindow system_cpu
    :stacking "fg"
    :focusable "false"
    :screen 1
    :monitor 0
	:geometry (geometry
            :x "20" 
			:y "20%" 
            :anchor "top right"
			:width "290px" 
			:height "120px")
    (system_cpu))


;; system_disk window
(defwindow system_disk
    :stacking "fg"
    :focusable "false"
    :screen 1
    :monitor 0
	:geometry (geometry
            :x "20" 
			:y "33%" 
            :anchor "top right"
			:width "290px" 
			:height "120px")
    (system_disk))

;; notification button
(defwidget notif_button []
  (box
    :class "notif_button"
    :space-evenly "false"
    :orientation "h"
    (button
	    :onclick "if ${EWW_CMD} state | grep 'rightside: false' ; then ${EWW_CMD} update rightside=true ; else ${EWW_CMD} update rightside=false ; fi"
      (label
      :text ""))))

;; Calendar Widget
(defwidget cal []
	(box 
	    :class "cal"
	    :orientation "h"
	    (box
	        :class "cal-in"
	        (calendar
			  :day calendar_day 
			  :year calendar_year))))
;; Calendar Window
(defwindow calendar
    :stacking "fg"
    :focusable "false"
    :screen 1
    :monitor 0
	:geometry (geometry
        :x "20" 
	    :y "7%" 
        :anchor "top right"
	    :width "270px" 
	    :height "60px")
(cal))

;; separator
(defwidget sep []
  (box 
    :class "module-2"
    :vexpand "false"
    :hexpand "false"
    (label
        :class "separ"
        :text "|")))

;; gap
(defwidget gap []
  (box 
    :orientation "h"
    :hexpand "false"
    :visible "true"
    :width "150"))

;; define widget groups
;; left
(defwidget left []
	(box 
	    :orientation "h" 
		:space-evenly false  
        :halign "start"
		:class "left_modules"
    (launcher)
    (sep)
    (workspaces)))

;; center
(defwidget center []
	(box :orientation "h" 
		 :space-evenly false  
         :halign "center"
		 :class "center_modules"
    (appnames)))

;; right
(defwidget right []
	(box
	    :orientation "h" 
		:space-evenly false  
        :halign "end"
		:class "right_modules"
    (microphone)
    (volume)
    (sep)
    (mem)
    (cpu)
    (disk)
    (sep)
    (clock_module)
    (notif_button)
))

;; Define bar layout
(defwidget bar_layout []
  (centerbox 
    :class "bar_class"
    :orientation "h"
    (left)
    (center)
    (right)
    ))

;; Bar windows
(defwindow bar0
    :exclusive true
    :monitor 0
    :geometry (geometry 
        :x "15px"
        :y "9px"
        :width "98%"
        :height "30px"
        :anchor "top center")
    :stacking "fg"
    :windowtype "dock"
    (bar_layout))

(defwindow bar1
    :exclusive true
    :monitor 1
    :geometry (geometry 
        :x "15px"
        :y "9px"
        :width "98%"
        :height "30px"
        :anchor "top center")
    :stacking "bg"
    :windowtype "dock"
    (bar_layout))

(defwindow bar2
    :exclusive true
    :monitor 2
    :geometry (geometry 
        :x "15px"
        :y "9px"
        :width "98%"
        :height "30px"
        :anchor "top center")
    :stacking "bg"
    :windowtype "dock"
    (bar_layout))
